import Head from 'next/head'
import Layout from '../components/layout'
import ButtonLink from '../components/buttonLink'
import Link from 'next/link'
import ProjectCluster from '../components/projectCluster'
import ArticleCluster from '../components/articleCluster'
import styles from '../styles/pages/home.module.scss'
import { getAllPosts, getAllProject } from '../lib/api'
import MediaQuery from 'react-responsive'
import { motion } from "framer-motion"
import { pageVariants, pageTransition } from '../utils'
import HomeQuery from "../lib/query/HomeQuery"

function Home({ page, posts, projects, featuredProject }) {
  return (
    <Layout>
      <Head>
        <title>alotama | Sebastian Tamashiro</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className={styles.hero}>
        <div className={styles.heroWrapper}>
          <article className={styles.heroContainer}>
            <motion.h1
              initial="initial"
              animate="in"
              exit="out"
              variants={pageVariants}
              transition={pageTransition}
              className={styles.heroTitle}>{page.title}</motion.h1>
            <motion.p
              initial="initial"
              animate="in"
              exit="out"
              variants={pageVariants}
              transition={pageTransition}
              className={styles.heroContent}>{page.subtitle}</motion.p>
          </article>
          <motion.div
            initial="initial"
            animate="in"
            exit="out"
            variants={pageVariants}
            transition={pageTransition}
            className={styles.heroButtons}>
            <Link href={'/proyectos'} passHref>
              <ButtonLink secondary>{page.primaryCta}</ButtonLink>
            </Link>
            <Link href={'/sobre-mi'} passHref>
              <ButtonLink>{page.secondaryCta}</ButtonLink>
            </Link>
          </motion.div>
        </div>
      </section>
      {featuredProject && (
        <MediaQuery minDeviceWidth={'48rem'} device={{ deviceWidth: '70em' }}>
          {(matches) => matches ? (
            <ProjectCluster
              compact={false}
              featured={featuredProject.isFeatured}
              title={featuredProject.name}
              subtitle={featuredProject.tagline}
              imageSrc={featuredProject.featuredImage.url}
              workType={featuredProject.services}
              slug={featuredProject.slug}
            />
          ) : (
            <ProjectCluster
              compact={true}
              featured={featuredProject.isFeatured}
              title={featuredProject.name}
              subtitle={featuredProject.tagline}
              imageSrc={featuredProject.featuredImage.url}
              workType={featuredProject.services}
              slug={featuredProject.slug}
            />
          )}
        </MediaQuery>
      )}
      <section className={styles.articlesContainer}>
        <motion.h2
          initial="initial"
          animate="in"
          exit="out"
          variants={pageVariants}
          transition={pageTransition}
          className={styles.articlesTitle}>Últimos artículos</motion.h2>
        <section className={styles.articlesLayout}>
          {posts && posts.map((article, index) => {
            return (
              <ArticleCluster
                key={`${article.slug}-${index}`}
                imageSrc={article.thumbnail.url}
                slug={article.url}
                title={article.title}
                excerpt={article.excerpt}
                publishDate={article.updatedAt}
                duration={'10 minutos'}
              />
            )
          })}
        </section>
      </section>
      {projects && projects.map((project, index) => (
        <MediaQuery minDeviceWidth={'48rem'} device={{ deviceWidth: '70em' }} key={`${project.title}-${index}`}>
          {(matches) => matches ? (
            <ProjectCluster
              compact={false}
              title={project.name}
              subtitle={project.tagline}
              imageSrc={project.featuredImage.url}
              workType={project.services}
              slug={project.slug}
            />
          ) : (
            <ProjectCluster
              compact={true}
              title={project.title}
              subtitle={project.tagline}
              imageSrc={project.featuredImage.url}
              workType={project.services}
              slug={project.slug}
            />
          )}
        </MediaQuery>
      ))}
    </Layout>
  )
}

export async function getStaticProps() {
  const { data } = await HomeQuery
  const { page, posts, projects } = data

  const featuredProject = projects.filter(project => project.isFeatured === true)[0]

  return {
    props: { page, posts, projects, featuredProject },
  }
}

export default Home;
